—оздать список положительных и отрицательных вещественных чисел.
ѕолучить из этого списка другой список, состо€щий только из положительных элементов первого, сто€щих на четных местах.

јлгоритм решени€ задачи.
Ќадо провер€ть каждый второй элемент первого списка, и если он больше нул€,
то добавл€ть во второй список. ќсобенностью алгоритма дл€ €зыка Python €вл€етс€ то,
что индексаци€ начинаетс€ с 0, а значит четные элементы имеют нечетные индексы.

ѕример выполнени€ кода:
—писок A:
 [0.09, 4.56, 2.57, -0.47, 2.78, -4.59, 4.19, 1.68, 2.8, -0.84, 4.72, -1.4, 2.77, 4.64, 0.68, 3.81, -2.09, -3.16, -4.78, 3.88]
—писок B:
 [4.56, 1.68, 4.64, 3.81, 3.88]
 
 
 ------------------------------------------
 
¬ списке чисел проверить, все ли элементы €вл€ютс€ уникальными, 
т.е. каждое число встречаетс€ только один раз.

–ешить данную задачу на €зыке Python можно несколькими способами. 
" лассический" вариант - брать по очереди элементы списка и сравнить каждый со сто€щими за ним.
ѕри первом же совпадении элементов делаетс€ вывод, что в списке есть одинаковы элементы и работа программы завершаетс€.

≈ще одним способом решени€ может быть использование типа данных "множества" (set). 
 ак известно, в множествах не может быть одинаковых элементов.
ѕри преобразовании списка в множество в нем одинаковые элементы будут представлены единожды.
≈сли после этого сравнить длину исходного списка и множества, то станет €сно, есть ли в списке одинаковые элементы.
≈сли длины совпадают, значит все элементы списка уникальны. ≈сли нет, то значит, были одинаковые элементы.

‘ункци€ set() преобразует список в множество.
ѕримеры выполнени€ кода:
[2, 4, 1, 2, 45, 38, 26, 11, 49, 25]
≈сть одинаковые
[44, 49, 21, 19, 23, 27, 34, 9, 41, 31]
¬се элементы уникальны